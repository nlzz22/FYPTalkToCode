Write a program:

< PROGRAM_C ><IDENTIFIER > (statementC())+ < PROGRAM_END >

statementC():
	simpleStatementC()
	| blockStatementC()
	| query()


query():
	"?"(#struct    				//display the partial struct of the current node in the tree (like where this node	belongs to
	|#tree  					//display the current AST, how the current tree looks like (this can be used to tested whether a block statement is finished, if a statement is unfinshed, this block will not be shown in the tree)
	)

blockStatementC():
	structDeclareStatement()
	| doWhileStatement()
	| forStatementC()
	| functionStatementC()
	| if_statementC()
	| whileStatementC()
	| switchStatement()

simpleStatementC():
	expressionC() < TERMINATOR >
	| create_variableC()
	| breakStatementC()
	| continueStatement()
	| labelStatement()
	| returnStatementC()
	| importStatementC()

importStatementC() :
	< INCLUDE >expressionC() < TERMINATOR >

labelStatement() :
	< LABEL >< IDENTIFIER > < TERMINATOR >

returnStatementC() :
	< RETURN >(expressionC())?< TERMINATOR >

continueStatement() :
	< CONTINUE >< IDENTIFIER > < TERMINATOR >

breakStatementC() :
	< BREAK > (< IDENTIFIER >)? < TERMINATOR >

create_variableC() :
	< CREATE >(catchModifier())*types_C()
	((<VARIABLE><IDENTIFIER>(expressionC())?<DECLARE_END>)
	|(<ARRAY><VARIABLE><IDENTIFIER>(<INDEX>expressionC()<INDEX_END>)+<DECLARED_END>)+
	< TERMINATOR >

switchStatement() :
	 < SWITCH > < CONDITION > expressionC() (< CASE > expressionC() < CASE_START > (statementC())*< CASE_END >)* (< _DEFAULT >< CASE_START >< CASE_END >)?< TERMINATOR >

doWhileStatement() :
	< DO > < CONDITION > exp = expressionC()< WHILE_START >(statementC())*< WHILE_END > < TERMINATOR >

whileStatementC() :
	< WHILE > < CONDITION >expressionC()< WHILE_START > (statementC())*< WHILE_END > < TERMINATOR >

forStatementC() :
	< FOR >< CONDITION >(expressionC())?< CONDITION >(expressionC())?< CONDITION >(expressionC())?< FOR_START >(statementC())*< FOR_END > < TERMINATOR >

if_statementC() :
	< IF > < CONDITION > expressionC()< IF_BRANCH_START >(statementC())*< IF_BRANCH_END >(< ELSE_BRANCH_START >(statementC())*< ELSE_BRANCH_END >)?< TERMINATOR >

functionStatementC() :
	< FUNCTION_DEC >< IDENTIFIER >(catchModifier())*(types_C())?(< PARAMETER >types_C()< IDENTIFIER >)*< FUNCTION_START >(statementC())*< FUNCTION_END > < TERMINATOR >

structDeclareStatement() :
	 < STRUCT_DEC >< IDENTIFIER >< STRUCT_START >(create_variableC())+< STRUCT_END > < TERMINATOR >

expressionC():
	prefix_expressionC()
	| infix_expressionC()
	| postfix_expressionC()
	| assignmentC()

assignmentC() :
	< ASSIGNMENT > fragmentC()(< WITH >| compoundOperators())expressionC()

postfix_expressionC() :
	< POST > < VARIABLE > < IDENTIFIER > postfixOperators()

prefix_expressionC() :
	(prefixOperators() fragmentC())|< MINUS >expressionC()

infix_expressionC() :
	termC()

termC() :
	fragmentC()(infixOperators()fragmentC())*

fragmentC() :
	< VALUE >value()
	| < VARIABLE >< IDENTIFIER >
	| < FUNCTION > < IDENTIFIER >< LPAREN >(< PARAMETER >expressionC())*< RPAREN >
	| < LPAREN > expressionC() < RPAREN >
	| < LBRACE >(< PARAMETER > expressionC())*< RBRACE >
	| < ARRAY > < IDENTIFIER > ( < INDEX > expressionC())+
	|  < ACCESS > < IDENTIFIER >(< IDENTIFIER >)+< ACCESS_END >

types_C():
	< IDENTIFIER >
	| (primitive_typesC())+

primitive_typesC() :
	< INT >
	| < CHAR >
	| < C_TYPES_MODIFIERS_UNSIGNED >
	| < DOUBLE >
	| < FLOAT >
	| < C_TYPES_MODIFIERS_SIGNED >
	| < LONG>
	| < SHORT>

value():
	< INTEGER_LITERAL >
	| < FLOATING_POINT_LITERAL >
	| < CHARACTER_LITERAL >
	| < STRING_LITERAL >
	| < TRUE >
	| < FALSE >

catchModifier():
	< ABSTRACT >
	| < PRIVATE >
	| < PROTECTED >
	| < PUBLIC >
	| < STATIC >
	| < FINAL >
	| < SYNCHRONIZED >
	| < VOLATILE >
	| < CONST >

postfixOperators() :
	< INCR >
	| < DECR >

prefixOperators() :
	< INCR >
	| < DECR >
	| < BANG >
	| < TILDE >

compoundOperators() :
	< PLUSASSIGN >
	| < MINUSASSIGN >
	| < STARASSIGN >
	| < SLASHASSIGN >
	| < REMASSIGN >
	| < ORASSIGN >
	| < ANDASSIGN >
	| < XORASSIGN >

infixOperators() :
	< PLUS >
	| < MINUS >
	| < STAR >
	| < SLASH >
	| < LT >
	| < GT >
	| < EQ >
	| < LE >
	| < GE >
	| < NE >
	| < SC_OR >
	| < SC_AND >
	| < BIT_AND >
	| < BIT_OR >
	| < XOR >
	| < REM >
	| < SHIFT_LEFT >
	| < SHIFT_RIGHT >

##TOKENS	
< IDENTIFIER : < LETTER > (< PART_LETTER >)* >
| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >
| < #PART_LETTER : [ "$", "0"-"9", "A"-"Z", "_", "a"-"z" ] >

< C_TYPES_MODIFIERS_SIGNED : "signed" >
< C_TYPES_MODIFIERS_UNSIGNED : "unsigned" >
< ASSIGNMENT : "#assign" >
< CREATE : "#create" >
< TYPE : "#type" >
< VARIABLE : "#variable" >
< VALUE : "#value" >
< FUNCTION : "#function" >
< WITH : "#with" >
< CONDITION : "#condition" >
< EXPRESSIONS : "#expression" >
< IF_BRANCH_START : "#if_branch_start" >
< IF_BRANCH_END : "#if_branch_end" >
< ELSE_BRANCH_START : "#else_branch_start" >
< ELSE_BRANCH_END : "#else_branch_end" >
< PRE : "#pre" >
< POST : "#post" >
< TERMINATOR : ";;" >
< PARAMETER : "#parameter" >
< STRUCT : "#struct" >
< ARRAY : "#array" >
< ACCESS : "#access" >
< ACCESS_END : "#access_end" >
< LABEL : "#label" >
< INDEX : "#indexes" >
< INCLUDE : "#include" >
< FOR_START : "#for_start" >
< FOR_END : "#for_end" >
< WHILE_START : "#while_start" >
< WHILE_END : "#while_end" >
< SWITCH_START : "#switch_start" >
< SWITCH_END : "#switch_end" >
< CASE_START : "#case_start" >
< CASE_END : "#case_end" >
< FUNCTION_DEC : "#function_declare" >
< FUNCTION_START : "#function_start" >
< FUNCTION_END : "#function_end" >
< STRUCT_DEC : "#struct_declare" >
< STRUCT_START : "#struct_start" >
< STRUCT_END : "#struct_end" >
< PROGRAM_END : "#program_end" >
< PROGRAM_C : "#c_program" >
< DECLARE_END : "#dec_end" >
< DIMENSION : "#dimension" >
< PARAMETER_A : "#parameter_a" >
< TREE : "#tree" >
< ASSIGN : "=" >
< LT : "<" >
< GT : ">" >
< BANG : "!" >
< TILDE : "~" >
< HOOK : "?" >
< COLON : ":" >
< EQ : "==" >
< LE : "<=" >
< GE : ">=" >
< NE : "!=" >
< SC_OR : "||" >
< SC_AND : "&&" >
< INCR : "++" >
< DECR : "--" >
< PLUS : "+" >
< MINUS : "-" >
< STAR : "*" >
< SLASH : "/" >
< BIT_AND : "&" >
< BIT_OR : "|" >
< XOR : "^" >
< REM : "%" >
< PLUSASSIGN : "+=" >
< MINUSASSIGN : "-=" >
< STARASSIGN : "*=" >
< SLASHASSIGN : "/=" >
< ANDASSIGN : "&=" >
< ORASSIGN : "|=" >
< XORASSIGN : "^=" >
< REMASSIGN : "%=" >
< SHIFT_LEFT : "<<" >
< SHIFT_RIGHT : " >>" >
< LPAREN : "(" >
< RPAREN : ")" >
< LBRACE : "{" >
< RBRACE : "}" >
< INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
| < FLOATING_POINT_LITERAL :
    < DECIMAL_FLOATING_POINT_LITERAL >
  | < HEXADECIMAL_FLOATING_POINT_LITERAL >>
| < #DECIMAL_FLOATING_POINT_LITERAL :
    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< DECIMAL_EXPONENT >)? ([ "f", "F", "d", "D" ])?
  | "." ([ "0"-"9" ])+ (< DECIMAL_EXPONENT >)? ([ "f", "F", "d", "D" ])?
  | ([ "0"-"9" ])+ < DECIMAL_EXPONENT > ([ "f", "F", "d", "D" ])?
  | ([ "0"-"9" ])+ (< DECIMAL_EXPONENT >)? [ "f", "F", "d", "D" ] >
| < #DECIMAL_EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
| < #HEXADECIMAL_FLOATING_POINT_LITERAL :
    "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ (".")? < HEXADECIMAL_EXPONENT > ([ "f", "F", "d", "D" ])?
  | "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])* "." ([ "0"-"9", "a"-"f", "A"-"F" ])+ < HEXADECIMAL_EXPONENT > ([ "f", "F", "d", "D" ])? >
| < #HEXADECIMAL_EXPONENT : [ "p", "P" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
| < CHARACTER_LITERAL :
    "\'"
    (
      ~[ "\'", "\\", "\n", "\r" ]
    | "\\"
      (
        [ "n", "t", "b", "r", "f", "\\", "\'", "\"" ]
      | [ "0"-"7" ] ([ "0"-"7" ])?
      | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
      )
    )
    "\'" >
| < STRING_LITERAL :
    "\""
    (
      ~[ "\"", "\\", "\n", "\r" ]
    | "\\"
      (
        [ "n", "t", "b", "r", "f", "\\", "\'", "\"" ]
      | [ "0"-"7" ] ([ "0"-"7" ])?
      | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
      )
    )*
    "\"" >

< ABSTRACT : "abstract" >
< ASSERT : "assert" >
< BOOLEAN : "boolean" >
< BREAK : "break" >
< BYTE : "byte" >
< CASE : "case" >
< CATCH : "catch" >
< CHAR : "char" >
< CLASS : "class" >
< CONST : "const" >
< CONTINUE : "continue" >
< _DEFAULT : "default" >
< DO : "do" >
< DOUBLE : "double" >
< ELSE : "else" >
< ENUM : "enum" >
< EXTENDS : "extends" >
< FALSE : "false" >
< FINAL : "final" >
< FINALLY : "finally" >
< FLOAT : "float" >
< FOR : "for" >
< GOTO : "goto" >
< IF : "if" >
< IMPLEMENTS : "implements" >
< IMPORT : "import" >
< INSTANCEOF : "instanceof" >
< INT : "int" >
< INTERFACE : "interface" >
< LONG : "long" >
< NATIVE : "native" >
< NEW : "new" >
< NULL : "null" >
< PACKAGE : "package" >
< PRIVATE : "private" >
< PROTECTED : "protected" >
< PUBLIC : "public" >
< RETURN : "return" >
< SHORT : "short" >
< STATIC : "static" >
< STRICTFP : "strictfp" >
< SUPER : "super" >
< SWITCH : "switch" >
< SYNCHRONIZED : "synchronized" >
< THIS : "this" >
< THROW : "throw" >
< THROWS : "throws" >
< TRANSIENT : "transient" >
< TRUE : "true" >
< TRY : "try" >
< VOID : "void" >
< VOLATILE : "volatile" >
< WHILE : "while" >